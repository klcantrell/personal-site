[
  {
    "slug": "pichat",
    "title": "PiChat",
    "description": "The chat style interface of this app accepts commands from the user.  The user can send a command to subscribe to real-time updates of temperature readings from the Raspberry Pi.  If the user wants to unsubscribe or just wants the latest temperature reading, there are commands for that, too.",
    "excerpt": "Subscribe to real-time updates of temperature readings from a Raspberry Pi.  The UI features a chat style interface that can accept different commands from the user.",
    "userCan": [
      "Interact with a Raspberry Pi through a chat UI",
      "Subscribe to real-time data",
      "Be notified if they issue a command that the Pi doesn't understand"
    ],
    "techHighlights": [
      "Used <strong>AWS AppSync</strong> to run a <strong>GraphQL</strong> back-end service",
      "Used <strong>React</strong> for rendering the UI and managing app state",
      "Used <strong>Raspberry Pi</strong> running <strong>Node</strong> and <strong>Apollo Client</strong> for sending data"
    ],
    "techUsed": ["GraphQL", "React", "Sass", "AWS", "Node.js"],
    "github": "https://github.com/klcantrell/pi-chat/",
    "website": "https://pichat.surge.sh/"
  },
  {
    "slug": "simon-morph",
    "title": "Simon Morph",
    "description": "This app is a browser based implementation of the original Simon game.  The game creates a pattern of tones and lights, and challenges the user to repeat the pattern in exact sequence.  This user interface features morphing text that reminds the user whose turn it is and whether they've succeeded or failed.",
    "excerpt": "Exercise your memory muscles with this game of tones, lights, and patterns. The UI features a morphing SVG message that indicates the game's status.",
    "userCan": [
      "See the same series of button presses but with an additional step each time they input the pattern correctly",
      "Hear a sound that corresponds to each button both when the series plays for them and when they press a button",
      "Get notified when they press a wrong button and the series of starts again to remind them of the pattern so they can try again",
      "Win the game by getting a series of 20 steps correct"
    ],
    "techHighlights": [
      "Used <strong>JS async functions</strong> to control how the game responds to user interactions",
      "Composed the functionality of the CPU and player objects with small factory functions"
    ],
    "techUsed": [
      "JavaScript",
      "SVG",
      "KUTE.js",
      "HTML",
      "Sass",
      "Webpack",
      "PostCSS"
    ],
    "github": "https://github.com/klcantrell/simon-morphedition/",
    "website": "https://simon-morphedition.surge.sh/"
  },
  {
    "slug": "sw-guess",
    "title": "Star Wars Guess Who Game",
    "description": "This is a <strong>React</strong> app that challenges the user to guess the name of random Star Wars characters.",
    "excerpt": "Guess the random character and see how high you can get your streak of correct guesses. Login to save your streak.",
    "userCan": [
      "Play the game and try to select the name of the character displayed in the random image",
      "Sign up for an account to save their streak score"
    ],
    "techHighlights": [
      "Used <strong>AWS Lambda</strong> running <strong>Node</strong> to server-side render the initial load of the app",
      "Used <strong>AWS Lambda</strong> running <strong>Node</strong> to handle authentication with <strong>JWTs</strong>",
      "Used <strong>React</strong> for rendering the UI and managing app state",
      "Used <strong>AWS RDS</strong> running <strong>PostgreSQL</strong> to persist the user's streak if they choose to sign up"
    ],
    "techUsed": ["AWS", "Node.js", "React", "SVG", "JWT", "CSS", "Webpack"],
    "github": "https://github.com/klcantrell/ssr-react-swapi/",
    "website": "https://swguesswho.kalalau-cantrell.me/"
  }
]
